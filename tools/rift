#!/bin/bash

# Rift - Ansible deployment management script
# Author: Rob Weiss
# Email: rob.weiss@red-alpha.com

# Set script directory and data directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [ -f "/usr/share/rift/VERSION" ]; then
    # Running from installed location
    DATA_DIR="/usr/share/rift"
    CMD_DIR="/usr/libexec/rift/commands"
else
    # Running from development location
    DATA_DIR="$SCRIPT_DIR/.."
    CMD_DIR="$SCRIPT_DIR/commands"
fi

# Default values
DEPLOYMENT_TYPE="baremetal"
INVENTORY_FILE="inventory/inventory.ini"
VERBOSE=""
SSH_KEY=""
VERSION=$(cat "$DATA_DIR/VERSION" | tr -d '[:space:]')
RELEASE="1"

# Print usage information
usage() {
    echo "Rift - Ansible deployment management script"
    echo
    echo "Usage: $0 [options] <command> [command-options]"
    echo
    echo "Commands:"
    echo "  generate     Generate inventory.ini file interactively"
    echo "  verify       Verify inventory structure and deployment type"
    echo "  preflight    Run preflight checks and setup installation user"
    echo "  deploy       Deploy Rift to the target environment"
    echo "  test         Run installation verification tests"
    echo "  dashboard    Manage Grafana dashboards on controller node"
    echo "  dye-add      Add dye files from source to target directories"
    echo "  dye-remove   Remove dye files from target directories"
  echo "  input-add    Add input files from source to target directory (atomic copy)"
  echo "  output-add   Add output files from source to target directory (atomic copy)"
  echo "  version      Show version information"
    echo "  help         Show this help message"
    echo
    echo "Options:"
    echo "  -t, --type    Deployment type (baremetal|cloud) [default: baremetal]"
    echo "  -i, --inventory  Inventory file [default: inventory/inventory.ini]"
    echo "  -v, --verbose Enable verbose output"
    echo "  -k, --key     SSH public key file for installation user"
    echo "  -h, --help    Show this help message"
    echo
    echo "Examples:"
    echo "  $0 generate"
    echo "  $0 verify"
    echo "  $0 preflight -k ~/.ssh/id_rsa.pub"
    echo "  $0 deploy -t cloud"
    echo "  $0 test"
    echo "  $0 dashboard add -d my-dashboard.json"
    echo "  $0 dye-add"
    echo "  $0 dye-remove --list"
    echo "  $0 dye-remove malware.dye"
  echo "  $0 input-add"
  echo "  $0 output-add"
  echo "  $0 version"
}

# Show version information
show_version() {
    echo "Rift version: $VERSION-$RELEASE"
    if command -v ansible &> /dev/null; then
        echo "Ansible version: $(ansible --version | head -n1)"
    else
        echo "Ansible version: unknown"
    fi
    echo "Python version: $(python3 --version 2>&1)"
}

# Run installation tests
run_tests() {
    local playbook="$DATA_DIR/playbooks/test.yml"
    if [ ! -f "$playbook" ]; then
        echo "Error: Test playbook not found at $playbook"
        return 1
    fi

    echo "Running Rift installation tests..."
    ansible-playbook "$playbook" $VERBOSE
    return $?
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            DEPLOYMENT_TYPE="$2"
            shift 2
            ;;
        -i|--inventory)
            INVENTORY_FILE="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE="-v"
            shift
            ;;
        -k|--key)
            SSH_KEY="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            COMMAND="$1"
            shift
            break
            ;;
    esac
done

# Check if command is provided
if [ -z "$COMMAND" ]; then
    echo "Error: No command specified"
    usage
    exit 1
fi

# Source command files
source "$CMD_DIR/common.sh"
source "$CMD_DIR/generate.sh"
source "$CMD_DIR/verify.sh"
source "$CMD_DIR/preflight.sh"
source "$CMD_DIR/deploy.sh"
source "$CMD_DIR/dashboard.sh"
source "$CMD_DIR/dye-add.sh"
source "$CMD_DIR/dye-remove.sh"
source "$CMD_DIR/input-add.sh"
source "$CMD_DIR/output-add.sh"

# Execute commands
case "$COMMAND" in
    generate)
        generate_inventory "$INVENTORY_FILE"
        ;;
    verify)
        verify_inventory "$INVENTORY_FILE" "$DEPLOYMENT_TYPE" "$VERBOSE"
        ;;
    preflight)
        run_preflight "$INVENTORY_FILE" "$DEPLOYMENT_TYPE" "$VERBOSE" "$SSH_KEY"
        ;;
    deploy)
        run_deploy "$INVENTORY_FILE" "$DEPLOYMENT_TYPE" "$VERBOSE"
        ;;
    test)
        run_tests
        ;;
    dashboard)
        handle_dashboard_command "$@"
        ;;
    dye-add)
        handle_dye_add_command "$@"
        ;;
    dye-remove)
        handle_dye_remove_command "$@"
        ;;
    input-add)
        handle_input_add_command "$@"
        ;;
    output-add)
        handle_output_add_command "$@"
        ;;
    version)
        show_version
        ;;
    help)
        usage
        ;;
    *)
        echo "Error: Unknown command: $COMMAND"
        usage
        exit 1
        ;;
esac 